{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useNavigation } from '@react-navigation/native';\nimport styles from \"./styles\";\nimport Routes from \"../../componentes/menu/routes\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from \"@expo/vector-icons/AntDesign\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function TelaParques() {\n  var _fazerSolicitacaoComToken;\n  var navigation = useNavigation();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    dados = _useState2[0],\n    setDados = _useState2[1];\n  useEffect(function () {\n    fazerSolicitacaoComToken();\n  }, []);\n  function fazerSolicitacaoComToken() {\n    return (_fazerSolicitacaoComToken = _fazerSolicitacaoComToken || _asyncToGenerator(function* () {\n      try {\n        var token = yield AsyncStorage.getItem('token');\n        if (token) {\n          var headers = {\n            'Content-type': 'application/json; charset=UTF-8',\n            'Authorization': `Bearer ${token}`\n          };\n          var response = yield fetch('https://tcc-production-e100.up.railway.app/api/lazer/parque', {\n            method: 'GET',\n            headers: headers\n          });\n          if (response.status === 200) {\n            var data = yield response.json();\n            var userLatitude = parseFloat(yield AsyncStorage.getItem('latitude'));\n            var userLongetude = parseFloat(yield AsyncStorage.getItem('longetude'));\n            data.forEach(function (parque) {\n              if (parque.latitude && parque.longetude) {\n                var distancia = calcularDistancia(userLatitude, userLongetude, parque.latitude, parque.longetude);\n                parque.distanciaUsuario = distancia.toFixed(2);\n              } else {\n                parque.distanciaUsuario = 'Indisponível';\n              }\n            });\n            var ordenarPorProximidade = function ordenarPorProximidade(parques) {\n              return parques.sort(function (a, b) {\n                if (a.distanciaUsuario === 'Indisponível') return 1;\n                if (b.distanciaUsuario === 'Indisponível') return -1;\n                return parseFloat(a.distanciaUsuario) - parseFloat(b.distanciaUsuario);\n              });\n            };\n            setDados(ordenarPorProximidade(data));\n          } else {\n            console.error('Erro na solicitação:', response.status);\n          }\n        } else {\n          console.log('Token não encontrado em AsyncStorage.');\n        }\n      } catch (error) {\n        console.error('Erro ao fazer a solicitação:', error);\n      }\n    })).apply(this, arguments);\n  }\n  var calcularDistancia = function calcularDistancia(lat1, lon1, lat2, lon2) {\n    var radlat1 = Math.PI * lat1 / 180;\n    var radlat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n    dist = dist * 1.609344;\n    return dist;\n  };\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      backgroundColor: '#FFF'\n    },\n    children: [_jsxs(ScrollView, {\n      children: [_jsx(TouchableOpacity, {\n        style: styles.botaopular,\n        onPress: function onPress() {\n          return navigation.navigate('TelaInicial');\n        },\n        children: _jsxs(Text, {\n          style: {\n            color: '#000',\n            fontSize: 35,\n            left: 30,\n            marginTop: 60\n          },\n          children: [_jsx(Icon, {\n            name: \"leftcircle\",\n            size: 40,\n            color: \"#17A558\"\n          }), \"  Parques\"]\n        })\n      }), dados.map(function (item, index) {\n        return _jsx(TouchableOpacity, {\n          style: {\n            marginBottom: 20\n          },\n          onPress: function onPress() {\n            return navigation.navigate('TelaDetalhes', item);\n          },\n          children: _jsxs(View, {\n            style: {\n              backgroundColor: '#B1D3C1',\n              borderRadius: 35,\n              padding: 10,\n              flexDirection: 'row',\n              alignItems: 'center',\n              marginLeft: 20,\n              marginRight: 20,\n              marginTop: 10\n            },\n            children: [_jsx(Image, {\n              source: {\n                uri: item.imagem\n              },\n              style: styles.Imagens\n            }), _jsxs(View, {\n              style: {\n                marginLeft: 10,\n                flexShrink: 1\n              },\n              children: [_jsx(Text, {\n                style: {\n                  fontSize: 18,\n                  marginBottom: 5,\n                  flexShrink: 1,\n                  flexWrap: 'wrap'\n                },\n                children: item.nome\n              }), _jsx(Text, {\n                style: {\n                  fontSize: 10,\n                  flexShrink: 1,\n                  flexWrap: 'wrap'\n                },\n                children: item.descricao\n              }), _jsxs(Text, {\n                style: {\n                  fontSize: 10,\n                  marginTop: 5\n                },\n                children: [\"Dist\\xE2ncia: \", item.distanciaUsuario, \" km de voc\\xEA\"]\n              })]\n            })]\n          })\n        }, item.idLazer);\n      })]\n    }), _jsxs(Text, {\n      children: ['\\n', '\\n', '\\n', '\\n', '\\n']\n    }), _jsx(Routes, {})]\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","View","Image","TouchableOpacity","Text","ScrollView","useNavigation","styles","Routes","AsyncStorage","Icon","jsx","_jsx","jsxs","_jsxs","TelaParques","_fazerSolicitacaoComToken","navigation","_useState","_useState2","_slicedToArray","dados","setDados","fazerSolicitacaoComToken","_asyncToGenerator","token","getItem","headers","response","fetch","method","status","data","json","userLatitude","parseFloat","userLongetude","forEach","parque","latitude","longetude","distancia","calcularDistancia","distanciaUsuario","toFixed","ordenarPorProximidade","parques","sort","a","b","console","error","log","apply","arguments","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","style","flex","backgroundColor","children","botaopular","onPress","navigate","color","fontSize","left","marginTop","name","size","map","item","index","marginBottom","borderRadius","padding","flexDirection","alignItems","marginLeft","marginRight","source","uri","imagem","Imagens","flexShrink","flexWrap","nome","descricao","idLazer"],"sources":["C:/Users/Vivian/OneDrive - Etec Centro Paula Souza/Documents/GitHub/AppLinkedPark/src/paginas/TelaParques/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Image, TouchableOpacity, Text, ScrollView } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport styles from './styles';\r\nimport Routes from '../../componentes/menu/routes';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport Icon from 'react-native-vector-icons/AntDesign';\r\n\r\nexport default function TelaParques() {\r\n  const navigation = useNavigation();\r\n  const [dados, setDados] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fazerSolicitacaoComToken();\r\n  }, []);\r\n\r\n  async function fazerSolicitacaoComToken() {\r\n    try {\r\n      const token = await AsyncStorage.getItem('token');\r\n\r\n      if (token) {\r\n        const headers = {\r\n          'Content-type': 'application/json; charset=UTF-8',\r\n          'Authorization': `Bearer ${token}`\r\n        };\r\n\r\n        const response = await fetch('https://tcc-production-e100.up.railway.app/api/lazer/parque', {\r\n          method: 'GET',\r\n          headers: headers\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          const data = await response.json();\r\n\r\n          const userLatitude = parseFloat(await AsyncStorage.getItem('latitude'));\r\n          const userLongetude = parseFloat(await AsyncStorage.getItem('longetude'));\r\n\r\n          data.forEach(parque => {\r\n            if (parque.latitude && parque.longetude) {\r\n              const distancia = calcularDistancia(userLatitude, userLongetude, parque.latitude, parque.longetude);\r\n              parque.distanciaUsuario = distancia.toFixed(2); // Adicionando a propriedade 'distanciaUsuario' ao objeto do parque\r\n            } else {\r\n              parque.distanciaUsuario = 'Indisponível';\r\n            }\r\n          });\r\n\r\n          const ordenarPorProximidade = (parques) => {\r\n            return parques.sort((a, b) => {\r\n              if (a.distanciaUsuario === 'Indisponível') return 1;\r\n              if (b.distanciaUsuario === 'Indisponível') return -1;\r\n              return parseFloat(a.distanciaUsuario) - parseFloat(b.distanciaUsuario);\r\n            });\r\n          };\r\n\r\n          setDados(ordenarPorProximidade(data));\r\n        } else {\r\n          console.error('Erro na solicitação:', response.status);\r\n        }\r\n      } else {\r\n        console.log('Token não encontrado em AsyncStorage.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao fazer a solicitação:', error);\r\n    }\r\n  }\r\n\r\n  const calcularDistancia = (lat1, lon1, lat2, lon2) => {\r\n    // Cálculo da distância entre as coordenadas lat1, lon1 e lat2, lon2\r\n    const radlat1 = Math.PI * lat1 / 180;\r\n    const radlat2 = Math.PI * lat2 / 180;\r\n    const theta = lon1 - lon2;\r\n    const radtheta = Math.PI * theta / 180;\r\n    let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n\r\n    dist = Math.acos(dist);\r\n    dist = dist * 180 / Math.PI;\r\n    dist = dist * 60 * 1.1515; // Distância em milhas\r\n    dist = dist * 1.609344; // Converter milhas para quilômetros\r\n\r\n    return dist;\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, backgroundColor: '#FFF' }}>\r\n      <ScrollView>\r\n        <TouchableOpacity style={styles.botaopular} onPress={() => navigation.navigate('TelaInicial')}>\r\n          <Text style={{ color: '#000', fontSize: 35, left: 30, marginTop: 60 }}>\r\n            <Icon name=\"leftcircle\" size={40} color='#17A558' />  Parques\r\n          </Text>\r\n        </TouchableOpacity>\r\n\r\n        {dados.map((item, index) => (\r\n          <TouchableOpacity\r\n            key={item.idLazer}\r\n            style={{ marginBottom: 20 }} // Espaço entre os parques\r\n            onPress={() => navigation.navigate('TelaDetalhes', item)}\r\n          >\r\n            <View\r\n              style={{\r\n                backgroundColor: '#B1D3C1',\r\n                borderRadius: 35,\r\n                padding: 10,\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                marginLeft: 20,\r\n                marginRight: 20,\r\n                marginTop: 10\r\n              }}\r\n            >\r\n              <Image source={{ uri: item.imagem }} style={styles.Imagens} />\r\n              <View style={{ marginLeft: 10, flexShrink: 1 }}>\r\n                <Text\r\n                  style={{\r\n                    fontSize: 18,\r\n                    marginBottom: 5,\r\n                    flexShrink: 1,\r\n                    flexWrap: 'wrap', // Permite que o texto quebre em várias linhas\r\n                  }}\r\n                >\r\n                  {item.nome}\r\n                </Text>\r\n                <Text\r\n                  style={{\r\n                    fontSize: 10,\r\n                    flexShrink: 1,\r\n                    flexWrap: 'wrap', // Permite que o texto quebre em várias linhas\r\n                  }}\r\n                >\r\n                  {item.descricao}\r\n                </Text>\r\n                <Text style={{ fontSize: 10, marginTop: 5 }}>\r\n                  Distância: {item.distanciaUsuario} km de você\r\n                </Text>\r\n              </View>\r\n            </View>\r\n          </TouchableOpacity>\r\n        ))}\r\n      </ScrollView>\r\n      <Text>{'\\n'}{'\\n'}{'\\n'}{'\\n'}{'\\n'}</Text>\r\n      <Routes></Routes>\r\n    </View>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}